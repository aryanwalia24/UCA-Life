class Solution {
public:
    double mincostToHireWorkers(vector<int>& qual, vector<int>& wage, int k) {
        vector<pair<double, int>> ratio;
        for (int i = 0; i < qual.size(); i++) {
            ratio.push_back({static_cast<double>(wage[i]) / qual[i], i});
        }
        sort(begin(ratio), end(ratio));
        priority_queue<int> maxH;
        double maxrate = 0.0;
        int qualSum = 0;
        for (int i = 0; i < k; i++) {
            qualSum += qual[ratio[i].second];
            maxrate = max(maxrate, ratio[i].first);
            maxH.push(qual[ratio[i].second]);
        }
        double ans = maxrate * qualSum;

        for (int i = k; i < qual.size(); i++) {
            maxrate = max(maxrate, ratio[i].first);
            qualSum -= maxH.top();
            maxH.pop();

            qualSum += qual[ratio[i].second];
            maxH.push(qual[ratio[i].second]);
            ans = min(ans, maxrate * qualSum);
        }

        return ans;
    }
};
